все, что касается версии Java:
java 19.0.2 2023-01-17
Java(TM) SE Runtime Environment (build 19.0.2+7-44)
Java HotSpot(TM) 64-Bit Server VM (build 19.0.2+7-44, mixed mode, sharing)

система сборки:
Gradle 8.0
Kotlin:       1.8.10
Groovy:       3.0.13
Ant:          Apache Ant(TM) version 1.10.11 compiled on July 10 2021
JVM:          19.0.2 (Oracle Corporation 19.0.2+7-44)
OS:           Mac OS X 12.5 aarch64

В Java ARchive, который называется у меня shiftTestTask.jar, собирал командой ./gradlew build

Единственное, что мое решение полагается на то, что длина строк ограничена сверху. Тк в теории строка может быть такой
длины, что сама по себе не помещается в память.
Таже при переполнении 8 байт, число не учитывается, а оркугление происходит в сторону 0.

Для каждого входного файла создаю по потоку, который с ним работает. Также создаю по потоку для выходных файлов. Это
сделано для того, чтобы одновременно в памяти не было слишком много данных, по достижении лимита, который задается
внутри кода, приходит поток, который переписывает все в файл, а читаюший поток блокируется,
тк я использкю блокирующую очередь, которая позволяет это сделать + она потоко-безопасна.

Также предоставляю файлы для начального тестирования, которые даны в условии.

Пример запуска утилиты: java -jar shiftTestTask.jar -s -a -p sample- in1.txt in2.txt
